{"ast":null,"code":"var _jsxFileName = \"/Users/junyueli/codebase/metajedd/metajedd/components/TopLevelContainer.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Head from \"next/head\";\nimport matter from \"gray-matter\";\nimport path from \"path\";\nimport fs from \"fs\";\nexport const MetadataContext = React.createContext([]);\n\nconst TopLevelContainer = ({\n  title,\n  articleMetadatas,\n  children\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 4\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, title), __jsx(\"meta\", {\n    charSet: \"utf-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }), __jsx(\"meta\", {\n    name: \"viewport\",\n    content: \"initial-scale=1.0, width=device-width\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  })), __jsx(MetadataContext.Provider, {\n    value: articleMetadatas !== null && articleMetadatas !== void 0 ? articleMetadatas : [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }\n  }, children));\n};\n\nexport default TopLevelContainer;\nexport const getStaticProps = async () => {\n  const dirPath = path.join(\"pages\", \"articles\", \"contents\");\n  const metadatas = fs.readdirSync(dirPath).map(filename => fs.readFileSync(path.join(dirPath, filename)).toString()).map(data => matter(data).data);\n  return {\n    props: {\n      articleMetadatas: metadatas\n    }\n  };\n};","map":{"version":3,"sources":["/Users/junyueli/codebase/metajedd/metajedd/components/TopLevelContainer.tsx"],"names":["React","Head","matter","path","fs","MetadataContext","createContext","TopLevelContainer","title","articleMetadatas","children","getStaticProps","dirPath","join","metadatas","readdirSync","map","filename","readFileSync","toString","data","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,OAAO,MAAMC,eAAe,GAAGL,KAAK,CAACM,aAAN,CAAgC,EAAhC,CAAxB;;AAEP,MAAMC,iBAAiD,GAAG,CAAC;AAC1DC,EAAAA,KAD0D;AAE1DC,EAAAA,gBAF0D;AAG1DC,EAAAA;AAH0D,CAAD,KAIpD;AACL,SACC,4BACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQF,KAAR,CADD,EAEC;AAAM,IAAA,OAAO,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAGC;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC,uCAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHD,CADD,EAMC,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEC,gBAAF,aAAEA,gBAAF,cAAEA,gBAAF,GAAsB,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEC,QADF,CAND,CADD;AAYA,CAjBD;;AAmBA,eAAeH,iBAAf;AAEA,OAAO,MAAMI,cAA8B,GAAG,YAAY;AACzD,QAAMC,OAAO,GAAGT,IAAI,CAACU,IAAL,CAAU,OAAV,EAAmB,UAAnB,EAA+B,UAA/B,CAAhB;AACA,QAAMC,SAAS,GAAGV,EAAE,CAClBW,WADgB,CACJH,OADI,EAEhBI,GAFgB,CAEZC,QAAQ,IAAIb,EAAE,CAACc,YAAH,CAAgBf,IAAI,CAACU,IAAL,CAAUD,OAAV,EAAmBK,QAAnB,CAAhB,EAA8CE,QAA9C,EAFA,EAGhBH,GAHgB,CAGZI,IAAI,IAAIlB,MAAM,CAACkB,IAAD,CAAN,CAAaA,IAHT,CAAlB;AAIA,SAAO;AACNC,IAAAA,KAAK,EAAE;AACNZ,MAAAA,gBAAgB,EAAEK;AADZ;AADD,GAAP;AAKA,CAXM","sourcesContent":["import React from \"react\";\nimport Props from \"../interfaces/props\";\nimport Head from \"next/head\";\nimport Metadata from \"../interfaces/metadata\";\nimport {GetStaticProps} from \"next\";\nimport matter from \"gray-matter\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport const MetadataContext = React.createContext<Metadata[]>([]);\n\nconst TopLevelContainer: React.FunctionComponent<Props> = ({\n\ttitle,\n\tarticleMetadatas,\n\tchildren,\n}) => {\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<title>{title}</title>\n\t\t\t\t<meta charSet=\"utf-8\" />\n\t\t\t\t<meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n\t\t\t</Head>\n\t\t\t<MetadataContext.Provider value={articleMetadatas ?? []}>\n\t\t\t\t{children}\n\t\t\t</MetadataContext.Provider>\n\t\t</>\n\t);\n};\n\nexport default TopLevelContainer;\n\nexport const getStaticProps: GetStaticProps = async () => {\n\tconst dirPath = path.join(\"pages\", \"articles\", \"contents\");\n\tconst metadatas = fs\n\t\t.readdirSync(dirPath)\n\t\t.map(filename => fs.readFileSync(path.join(dirPath, filename)).toString())\n\t\t.map(data => matter(data).data);\n\treturn {\n\t\tprops: {\n\t\t\tarticleMetadatas: metadatas,\n\t\t},\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}