{"ast":null,"code":"var _jsxFileName = \"/Users/junyueli/codebase/metajedd/metajedd/pages/articles/[slug].tsx\";\nvar __jsx = React.createElement;\nimport fs from \"fs\";\nimport React from \"react\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport Head from \"next/head\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../../components/CodeBlock\";\nimport Navbar from \"../../components/Navbar\";\nimport TopLevelContainer from \"../../components/TopLevelContainer\";\n\nconst Post = ({\n  contents,\n  metadata\n}) => {\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 6\n    }\n  }, metadata.title)), __jsx(Navbar, {\n    title: \"Aritile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }), __jsx(TopLevelContainer, {\n    title: metadata.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(ReactMarkdown, {\n    source: contents,\n    renderers: {\n      code: CodeBlock\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 6\n    }\n  }))));\n};\n\nexport default Post;\nexport const getStaticPaths = async () => {\n  const files = fs.readdirSync(path.join(\"pages\", \"articles\", \"contents\"));\n  return {\n    paths: files.map(filename => ({\n      params: {\n        slug: filename.replace(\".md\", \"\")\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ctx => {\n  if (!ctx.params) {\n    return {\n      props: {}\n    };\n  }\n\n  const {\n    slug\n  } = ctx.params;\n  const filename = slug.toString();\n  const markdownMetaData = fs.readFileSync(path.join(\"pages\", \"articles\", \"contents\", filename + \".md\")).toString();\n  const parsed = matter(markdownMetaData);\n  return {\n    props: {\n      contents: parsed.content,\n      metadata: parsed.data\n    }\n  };\n};","map":{"version":3,"sources":["/Users/junyueli/codebase/metajedd/metajedd/pages/articles/[slug].tsx"],"names":["fs","React","path","matter","Head","ReactMarkdown","CodeBlock","Navbar","TopLevelContainer","Post","contents","metadata","title","code","getStaticPaths","files","readdirSync","join","paths","map","filename","params","slug","replace","fallback","getStaticProps","ctx","props","toString","markdownMetaData","readFileSync","parsed","content","data"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;;AAEA,MAAMC,IAAsC,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AACxE,SACC,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,QAAQ,CAACC,KAAjB,CADD,CADD,EAIC,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,EAKC,MAAC,iBAAD;AAAmB,IAAA,KAAK,EAAED,QAAQ,CAACC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEF,QAAvB;AAAiC,IAAA,SAAS,EAAE;AAACG,MAAAA,IAAI,EAAEP;AAAP,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CALD,CADD,CADD;AAaA,CAdD;;AAgBA,eAAeG,IAAf;AAEA,OAAO,MAAMK,cAA8B,GAAG,YAAY;AACzD,QAAMC,KAAK,GAAGf,EAAE,CAACgB,WAAH,CAAed,IAAI,CAACe,IAAL,CAAU,OAAV,EAAmB,UAAnB,EAA+B,UAA/B,CAAf,CAAd;AACA,SAAO;AACNC,IAAAA,KAAK,EAAEH,KAAK,CAACI,GAAN,CAAUC,QAAQ,KAAK;AAC7BC,MAAAA,MAAM,EAAE;AACPC,QAAAA,IAAI,EAAEF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB;AADC;AADqB,KAAL,CAAlB,CADD;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAAP;AAQA,CAVM;AAYP,OAAO,MAAMC,cAA8B,GAAG,MAAMC,GAAN,IAAa;AAC1D,MAAI,CAACA,GAAG,CAACL,MAAT,EAAiB;AAChB,WAAO;AAACM,MAAAA,KAAK,EAAE;AAAR,KAAP;AACA;;AACD,QAAM;AAACL,IAAAA;AAAD,MAASI,GAAG,CAACL,MAAnB;AACA,QAAMD,QAAQ,GAAGE,IAAI,CAACM,QAAL,EAAjB;AACA,QAAMC,gBAAgB,GAAG7B,EAAE,CACzB8B,YADuB,CACV5B,IAAI,CAACe,IAAL,CAAU,OAAV,EAAmB,UAAnB,EAA+B,UAA/B,EAA2CG,QAAQ,GAAG,KAAtD,CADU,EAEvBQ,QAFuB,EAAzB;AAGA,QAAMG,MAAM,GAAG5B,MAAM,CAAC0B,gBAAD,CAArB;AACA,SAAO;AACNF,IAAAA,KAAK,EAAE;AACNjB,MAAAA,QAAQ,EAAEqB,MAAM,CAACC,OADX;AAENrB,MAAAA,QAAQ,EAAEoB,MAAM,CAACE;AAFX;AADD,GAAP;AAMA,CAhBM","sourcesContent":["import fs from \"fs\";\nimport {GetStaticPaths, GetStaticProps} from \"next\";\nimport React from \"react\";\nimport Article from \"../../interfaces/article\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport Head from \"next/head\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../../components/CodeBlock\";\nimport Navbar from \"../../components/Navbar\";\nimport TopLevelContainer from \"../../components/TopLevelContainer\";\n\nconst Post: React.FunctionComponent<Article> = ({contents, metadata}) => {\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<Head>\n\t\t\t\t\t<title>{metadata.title}</title>\n\t\t\t\t</Head>\n\t\t\t\t<Navbar title=\"Aritile\" />\n\t\t\t\t<TopLevelContainer title={metadata.title}>\n\t\t\t\t\t<ReactMarkdown source={contents} renderers={{code: CodeBlock}} />\n\t\t\t\t</TopLevelContainer>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Post;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n\tconst files = fs.readdirSync(path.join(\"pages\", \"articles\", \"contents\"));\n\treturn {\n\t\tpaths: files.map(filename => ({\n\t\t\tparams: {\n\t\t\t\tslug: filename.replace(\".md\", \"\"),\n\t\t\t},\n\t\t})),\n\t\tfallback: false,\n\t};\n};\n\nexport const getStaticProps: GetStaticProps = async ctx => {\n\tif (!ctx.params) {\n\t\treturn {props: {}};\n\t}\n\tconst {slug} = ctx.params;\n\tconst filename = slug.toString();\n\tconst markdownMetaData = fs\n\t\t.readFileSync(path.join(\"pages\", \"articles\", \"contents\", filename + \".md\"))\n\t\t.toString();\n\tconst parsed = matter(markdownMetaData);\n\treturn {\n\t\tprops: {\n\t\t\tcontents: parsed.content,\n\t\t\tmetadata: parsed.data,\n\t\t},\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}