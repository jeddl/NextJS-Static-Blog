{"ast":null,"code":"var _jsxFileName = \"/Users/junyueli/codebase/metajedd/metajedd/pages/articles/[slug].tsx\";\nvar __jsx = React.createElement;\nimport fs from \"fs\";\nimport React from \"react\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport Head from \"next/head\";\nimport Remarkable from \"remarkable\";\n\nconst Post = ({\n  contents,\n  metadata\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, metadata.title)), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }\n  }, contents));\n};\n\nexport default Post;\nexport const getStaticPaths = async () => {\n  const files = fs.readdirSync(path.join(\"pages\", \"articles\", \"contents\"));\n  return {\n    paths: files.map(filename => ({\n      params: {\n        slug: filename.replace(\".md\", \"\")\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ctx => {\n  if (!ctx.params) {\n    return {\n      props: {}\n    };\n  }\n\n  const {\n    slug\n  } = ctx.params;\n  const filename = slug instanceof Array ? slug.join() : slug;\n  const markdownMetaData = fs.readFileSync(path.join(\"pages\", \"articles\", \"contents\", filename + \".md\")).toString();\n  const parsed = matter(markdownMetaData);\n  let mdHtmlParser = new Remarkable();\n  console.log(parsed.content);\n  console.log(mdHtmlParser); // const parsedHtml = mdHtmlParser.render(parsed.content);\n  // console.log(parsedHtml);\n  // const parsedHtml = marked(parsed.content);\n\n  return {\n    props: {\n      contents: \"abc\",\n      //parsedHtml,\n      metadata: parsed.data\n    }\n  };\n};","map":{"version":3,"sources":["/Users/junyueli/codebase/metajedd/metajedd/pages/articles/[slug].tsx"],"names":["fs","React","path","matter","Head","Remarkable","Post","contents","metadata","title","getStaticPaths","files","readdirSync","join","paths","map","filename","params","slug","replace","fallback","getStaticProps","ctx","props","Array","markdownMetaData","readFileSync","toString","parsed","mdHtmlParser","console","log","content","data"],"mappings":";;AAAA,OAAOA,EAAP,MAAe,IAAf;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,IAAsC,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AACxE,SACC,4BACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,QAAQ,CAACC,KAAjB,CADD,CADD,EAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,QAAN,CALD,CADD;AASA,CAVD;;AAYA,eAAeD,IAAf;AAEA,OAAO,MAAMI,cAA8B,GAAG,YAAY;AACzD,QAAMC,KAAK,GAAGX,EAAE,CAACY,WAAH,CAAeV,IAAI,CAACW,IAAL,CAAU,OAAV,EAAmB,UAAnB,EAA+B,UAA/B,CAAf,CAAd;AACA,SAAO;AACNC,IAAAA,KAAK,EAAEH,KAAK,CAACI,GAAN,CAAUC,QAAQ,KAAK;AAC7BC,MAAAA,MAAM,EAAE;AACPC,QAAAA,IAAI,EAAEF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB;AADC;AADqB,KAAL,CAAlB,CADD;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAAP;AAQA,CAVM;AAYP,OAAO,MAAMC,cAA8B,GAAG,MAAMC,GAAN,IAAa;AAC1D,MAAI,CAACA,GAAG,CAACL,MAAT,EAAiB;AAChB,WAAO;AAACM,MAAAA,KAAK,EAAE;AAAR,KAAP;AACA;;AACD,QAAM;AAACL,IAAAA;AAAD,MAASI,GAAG,CAACL,MAAnB;AACA,QAAMD,QAAQ,GAAGE,IAAI,YAAYM,KAAhB,GAAwBN,IAAI,CAACL,IAAL,EAAxB,GAAsCK,IAAvD;AACA,QAAMO,gBAAgB,GAAGzB,EAAE,CACzB0B,YADuB,CACVxB,IAAI,CAACW,IAAL,CAAU,OAAV,EAAmB,UAAnB,EAA+B,UAA/B,EAA2CG,QAAQ,GAAG,KAAtD,CADU,EAEvBW,QAFuB,EAAzB;AAGA,QAAMC,MAAM,GAAGzB,MAAM,CAACsB,gBAAD,CAArB;AACA,MAAII,YAAY,GAAG,IAAIxB,UAAJ,EAAnB;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAZ0D,CAa1D;AACA;AACA;;AACA,SAAO;AACNN,IAAAA,KAAK,EAAE;AACNhB,MAAAA,QAAQ,EAAE,KADJ;AACW;AACjBC,MAAAA,QAAQ,EAAEoB,MAAM,CAACK;AAFX;AADD,GAAP;AAMA,CAtBM","sourcesContent":["import fs from \"fs\";\nimport {GetStaticPaths, GetStaticProps} from \"next\";\nimport React from \"react\";\nimport Article from \"../../interfaces/article\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport Head from \"next/head\";\nimport Remarkable from \"remarkable\";\n\nconst Post: React.FunctionComponent<Article> = ({contents, metadata}) => {\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<title>{metadata.title}</title>\n\t\t\t</Head>\n\t\t\t{/* <div dangerouslySetInnerHTML={{__html: contents}} /> */}\n\t\t\t<div>{contents}</div>\n\t\t</>\n\t);\n};\n\nexport default Post;\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n\tconst files = fs.readdirSync(path.join(\"pages\", \"articles\", \"contents\"));\n\treturn {\n\t\tpaths: files.map(filename => ({\n\t\t\tparams: {\n\t\t\t\tslug: filename.replace(\".md\", \"\"),\n\t\t\t},\n\t\t})),\n\t\tfallback: false,\n\t};\n};\n\nexport const getStaticProps: GetStaticProps = async ctx => {\n\tif (!ctx.params) {\n\t\treturn {props: {}};\n\t}\n\tconst {slug} = ctx.params;\n\tconst filename = slug instanceof Array ? slug.join() : slug;\n\tconst markdownMetaData = fs\n\t\t.readFileSync(path.join(\"pages\", \"articles\", \"contents\", filename + \".md\"))\n\t\t.toString();\n\tconst parsed = matter(markdownMetaData);\n\tlet mdHtmlParser = new Remarkable();\n\tconsole.log(parsed.content);\n\tconsole.log(mdHtmlParser);\n\t// const parsedHtml = mdHtmlParser.render(parsed.content);\n\t// console.log(parsedHtml);\n\t// const parsedHtml = marked(parsed.content);\n\treturn {\n\t\tprops: {\n\t\t\tcontents: \"abc\", //parsedHtml,\n\t\t\tmetadata: parsed.data,\n\t\t},\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}