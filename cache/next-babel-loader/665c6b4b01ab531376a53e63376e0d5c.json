{"ast":null,"code":"var _jsxFileName = \"/Users/junyueli/codebase/metajedd/metajedd/pages/posts.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Navbar from \"../components/Navbar\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport Link from \"next/link\";\nimport TopLevelContainer from \"../components/TopLevelContainer\";\nimport matter from \"gray-matter\";\n\nconst Articles = ({\n  titleWithFilenames\n}) => __jsx(React.Fragment, null, __jsx(Navbar, {\n  title: \"Articles\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}), __jsx(TopLevelContainer, {\n  title: \"Articles\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 4\n  }\n}, \" Articles \"), __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 4\n  }\n}, titleWithFilenames.map(titleWithFilename => {\n  return __jsx(\"li\", {\n    key: titleWithFilename[\"filename\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, __jsx(Link, {\n    href: \"/articles/[slug]\",\n    as: \"/articles/\" + titleWithFilename[\"filename\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 8\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, titleWithFilename[\"title\"])));\n}))));\n\nexport default Articles;\nexport const getStaticProps = async () => {\n  const dirPath = path.join(\"pages\", \"articles\", \"contents\");\n  const files = fs.readdirSync(dirPath);\n  const metadatas = files.map(filename => fs.readFileSync(path.join(dirPath, filename)).toString()).map(data => matter(data).data);\n  const titles = metadatas.map(metadata => metadata.title);\n  let titleWithFilenames = [];\n\n  for (let i = 0; i < titles.length; i++) {\n    titleWithFilenames.push({\n      title: titles[i],\n      filename: files[i].replace(\".md\", \"\")\n    });\n  }\n\n  return {\n    props: {\n      titleWithFilenames: titleWithFilenames\n    }\n  };\n};","map":{"version":3,"sources":["/Users/junyueli/codebase/metajedd/metajedd/pages/posts.tsx"],"names":["Navbar","fs","path","Link","TopLevelContainer","matter","Articles","titleWithFilenames","map","titleWithFilename","getStaticProps","dirPath","join","files","readdirSync","metadatas","filename","readFileSync","toString","data","titles","metadata","title","i","length","push","replace","props"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAChB,4BACC,MAAC,MAAD;AAAQ,EAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAEC,MAAC,iBAAD;AAAmB,EAAA,KAAK,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACEA,kBAAkB,CAACC,GAAnB,CAAuBC,iBAAiB,IAAI;AAC5C,SACC;AAAI,IAAA,GAAG,EAAEA,iBAAiB,CAAC,UAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,IAAD;AACC,IAAA,IAAI,EAAC,kBADN;AAEC,IAAA,EAAE,EAAE,eAAeA,iBAAiB,CAAC,UAAD,CAFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,iBAAiB,CAAC,OAAD,CAArB,CAJD,CADD,CADD;AAUA,CAXA,CADF,CAFD,CAFD,CADD;;AAuBA,eAAeH,QAAf;AAEA,OAAO,MAAMI,cAA8B,GAAG,YAAY;AACzD,QAAMC,OAAO,GAAGT,IAAI,CAACU,IAAL,CAAU,OAAV,EAAmB,UAAnB,EAA+B,UAA/B,CAAhB;AACA,QAAMC,KAAK,GAAGZ,EAAE,CAACa,WAAH,CAAeH,OAAf,CAAd;AAEA,QAAMI,SAAS,GAAGF,KAAK,CACrBL,GADgB,CACZQ,QAAQ,IAAIf,EAAE,CAACgB,YAAH,CAAgBf,IAAI,CAACU,IAAL,CAAUD,OAAV,EAAmBK,QAAnB,CAAhB,EAA8CE,QAA9C,EADA,EAEhBV,GAFgB,CAEZW,IAAI,IAAId,MAAM,CAACc,IAAD,CAAN,CAAaA,IAFT,CAAlB;AAGA,QAAMC,MAAM,GAAGL,SAAS,CAACP,GAAV,CAAca,QAAQ,IAAIA,QAAQ,CAACC,KAAnC,CAAf;AACA,MAAIf,kBAAwB,GAAG,EAA/B;;AACA,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACvChB,IAAAA,kBAAkB,CAACkB,IAAnB,CAAwB;AACvBH,MAAAA,KAAK,EAAEF,MAAM,CAACG,CAAD,CADU;AAEvBP,MAAAA,QAAQ,EAAEH,KAAK,CAACU,CAAD,CAAL,CAASG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB;AAFa,KAAxB;AAIA;;AACD,SAAO;AACNC,IAAAA,KAAK,EAAE;AACNpB,MAAAA,kBAAkB,EAAEA;AADd;AADD,GAAP;AAKA,CApBM","sourcesContent":["import Navbar from \"../components/Navbar\";\nimport {GetStaticProps} from \"next\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport Link from \"next/link\";\nimport TopLevelContainer from \"../components/TopLevelContainer\";\nimport matter from \"gray-matter\";\n\nconst Articles = ({titleWithFilenames}) => (\n\t<>\n\t\t<Navbar title=\"Articles\"></Navbar>\n\t\t<TopLevelContainer title=\"Articles\">\n\t\t\t<h1> Articles </h1>\n\t\t\t<div>\n\t\t\t\t{titleWithFilenames.map(titleWithFilename => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={titleWithFilename[\"filename\"]}>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\thref=\"/articles/[slug]\"\n\t\t\t\t\t\t\t\tas={\"/articles/\" + titleWithFilename[\"filename\"]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<a>{titleWithFilename[\"title\"]}</a>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</TopLevelContainer>\n\t</>\n);\n\nexport default Articles;\n\nexport const getStaticProps: GetStaticProps = async () => {\n\tconst dirPath = path.join(\"pages\", \"articles\", \"contents\");\n\tconst files = fs.readdirSync(dirPath);\n\n\tconst metadatas = files\n\t\t.map(filename => fs.readFileSync(path.join(dirPath, filename)).toString())\n\t\t.map(data => matter(data).data);\n\tconst titles = metadatas.map(metadata => metadata.title);\n\tlet titleWithFilenames: {}[] = [];\n\tfor (let i = 0; i < titles.length; i++) {\n\t\ttitleWithFilenames.push({\n\t\t\ttitle: titles[i],\n\t\t\tfilename: files[i].replace(\".md\", \"\"),\n\t\t});\n\t}\n\treturn {\n\t\tprops: {\n\t\t\ttitleWithFilenames: titleWithFilenames,\n\t\t},\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}