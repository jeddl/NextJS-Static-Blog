{"ast":null,"code":"var __jsx = React.createElement;\nimport fs from \"fs\";\nimport React from \"react\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport Head from \"next/head\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"../../components/CodeBlock\";\n\nconst Post = ({\n  contents,\n  metadata\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, metadata.title)), __jsx(ReactMarkdown, {\n    source: contents,\n    renderers: {\n      code: CodeBlock\n    }\n  }));\n};\n\nexport default Post;\nexport const getStaticPaths = async () => {\n  const files = fs.readdirSync(path.join(\"pages\", \"articles\", \"contents\"));\n  return {\n    paths: files.map(filename => ({\n      params: {\n        slug: filename.replace(\".md\", \"\")\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ctx => {\n  if (!ctx.params) {\n    return {\n      props: {}\n    };\n  }\n\n  const {\n    slug\n  } = ctx.params;\n  const filename = slug.toString(); // const filename = slug instanceof Array ? slug.join() : slug;\n\n  const markdownMetaData = fs.readFileSync(path.join(\"pages\", \"articles\", \"contents\", filename + \".md\")).toString();\n  const parsed = matter(markdownMetaData);\n  return {\n    props: {\n      contents: parsed.content,\n      //parsedHtml,\n      metadata: parsed.data\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}